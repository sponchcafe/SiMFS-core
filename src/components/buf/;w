#include "component/component.hpp"
#include "io/queue_io.hpp"
#include <thread>

namespace sim{
    namespace comp{

        //-------------------------------------------------------------------//
        class Buffer : public Component{

            public:

                //-----------------------------------------------------------//
                Buffer ();

                //-----------------------------------------------------------//
                // Component interface 
                //-----------------------------------------------------------//
                void set_json(json j) override;

                //-----------------------------------------------------------//
                json get_json() override;

                //-----------------------------------------------------------//
                void init() override;

                //-----------------------------------------------------------//
                void run() override;
                //-----------------------------------------------------------//


                //-----------------------------------------------------------//
                // Parameter setters
                //-----------------------------------------------------------//
                void set_input_id(std::string id);
                void set_output_ids(std::string id);
                //-----------------------------------------------------------//
               
                
                //-----------------------------------------------------------//
                // Function templates for setting in- and outputs
                //-----------------------------------------------------------//
                template <template <class> class OutputT>
                void set_outputs(std::vector<std::string> ids){
                    set_outputs<OutputT>(ids);
                }

                //-----------------------------------------------------------//
                template <template <class> class OutputT> 
                void set_outputs(std::string id){
                    photon_output_id = id;
                    photon_output_ptr = 
                        create_output<OutputT, realtime_t>(
                            photon_output_id
                        );
                }

                //-----------------------------------------------------------//
                template <template <class> class InputT>
                void set_photon_inputs(){
                    set_photon_inputs<InputT>(photon_input_ids);
                }

                //-----------------------------------------------------------//
                template <template <class> class InputT>
                void set_photon_inputs(std::vector<std::string> ids){
                    photon_input_ids = ids;
                    photon_input_ptrs.clear();
                    for (auto &it: photon_input_ids){
                        std::unique_ptr<Input<realtime_t>> photon_input_ptr = 
                            create_input<InputT, realtime_t>(it);
                        photon_input_ptrs.push_back(std::move(photon_input_ptr));
                    }
                }
                //-----------------------------------------------------------//
                
                //-----------------------------------------------------------//

            private:

                //-----------------------------------------------------------//
                Coordinate get_initial_coordinate();

                //-----------------------------------------------------------//
                static double get_sigma (double d, double i);

                //-----------------------------------------------------------//
                bool check_within_box (Coordinate &c);

                //-----------------------------------------------------------//
                // Simulation parameters + defaults
                //-----------------------------------------------------------//
                double diffusion_coefficient = 1e-10;       // m/s^2
                double radius = 1e-6;                       // m
                double half_height = 1e-6;                  // m
                double experiment_time = 1;                 // s
                double increment = 1e-7;                    // s
                unsigned seed = 0;
                std::string coordinate_output_id = "./coords";
                std::string collision_output_id = "/dev/null";

                //-----------------------------------------------------------//
                double sigma = 0;
                unsigned long long steps = 0;
                random::Uniform uni{0};         // seed 0
                random::Normal normal{1, 0};     // sigma 1, seed 0
                realtime_t last_reset = 0;

                //-----------------------------------------------------------//
                Coordinate c0{0.0,0.0,0.0,0.0};
                Coordinate c1{0.0,0.0,0.0,0.0};

                //-----------------------------------------------------------//
                std::unique_ptr<Output<Coordinate>> coordinate_output_ptr;
                std::unique_ptr<Output<Coordinate>> collision_output_ptr;

        };

    }
}
